version: '1.0'
name: master-pipeline
displayName: MasterPipeline
triggers:
  trigger: manual
  push:
    tags:
      prefix:
        - v
variables:
  BUILD_VERSION: dss-pod/dss-data:v1.1.2
stages:
  - name: compile
    displayName: 编译
    strategy: naturally
    trigger: auto
    steps:
      - step: build@golang
        name: build_golang
        displayName: Golang 构建
        golangVersion: '1.18'
        commands:
          - mkdir output
          - cp -R `find ./* -type d -path ./output -prune -o -print | sed 1d ` ./output
        artifacts:
          - name: BUILD_ARTIFACT
            path:
              - ./output
        caches: []
        strategy: {}
  - name: stage-78d47e18
    displayName: 构建
    strategy: naturally
    trigger: auto
    executor: []
    steps:
      - step: build@docker
        name: build_docker
        displayName: 镜像构建
        type: cert
        certificate: 19d7df30-f95e-013a-0d61-6a560b86330d
        tag: ${BUILD_VERSION}
        dockerfile: ./docker/Dockerfile
        context: ./docker
        artifacts:
          - ${BUILD_ARTIFACT}
        isCache: false
        notify: []
        strategy:
          retry: '0'
  # - name: stage-1072fd8c
  #   displayName: 部署
  #   strategy: naturally
  #   trigger: auto
  #   executor: []
  #   steps:
  #     - step: shell@agent
  #       name: execute_shell
  #       displayName: 部署镜像
  #       hostGroupID:
  #         ID: home
  #         hostID:
  #           - 8c1a4605-0e9f-4ca6-9b17-e66ec4bfe5d1
  #       script:
  #         - docker stop dss-data
  #         - docker rm dss-data
  #         - docker rmi $(docker images | grep 'dss-data' | awk '{print $3}')
  #         - docker pull ${GITEE_DOCKER_IMAGE}
  #         - docker run -d --name dss-data -p 8081:32081 --restart=always --net=host ${GITEE_DOCKER_IMAGE}
  #       notify: []
  #       strategy:
  #         retry: '0'
