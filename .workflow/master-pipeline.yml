version: '1.0'
name: master-pipeline
displayName: MasterPipeline
triggers:
  trigger: manual
  push:
    tags:
      prefix:
        - v
variables:
  BUILD_TIME: dss-pod/dss:v1.0.0
stages:
  - name: compile
    displayName: 编译
    strategy: naturally
    trigger: auto
    steps:
      - step: build@golang
        name: build_golang
        displayName: Golang 构建
        golangVersion: '1.18'
        commands:
          - mkdir output
          - cp -R `find ./* -type d -path ./output -prune -o -print | sed 1d ` ./output
        artifacts:
          - name: BUILD_ARTIFACT
            path:
              - ./output
        caches: []
        strategy: {}
  - name: stage-78d47e18
    displayName: 构建
    strategy: naturally
    trigger: auto
    executor: []
    steps:
      - step: build@docker
        name: build_docker
        displayName: 镜像构建
        type: cert
        certificate: 19d7df30-f95e-013a-0d61-6a560b86330d
        tag: ${BUILD_TIME}
        dockerfile: ./docker/Dockerfile
        context: ./docker
        artifacts:
          - ${BUILD_ARTIFACT}
        isCache: false
        notify: []
        strategy:
          retry: '0'
  - name: stage-1072fd8c
    displayName: 部署
    strategy: naturally
    trigger: auto
    executor: []
    steps:
      - step: shell@agent
        name: execute_shell
        displayName: 部署镜像
        hostGroupID:
          ID: home
          hostID:
            - 515d22e7-91fe-48bc-bf77-cb98e56e5dd8
        script:
          - docker stop dss
          - docker rm dss
          - docker rmi $(docker images | grep 'dss' | awk '{print $3}')
          - docker pull ${GITEE_DOCKER_IMAGE}
          - docker run -d --name dss -p 32081:32081 ${GITEE_DOCKER_IMAGE}
        notify: []
        strategy:
          retry: '0'
